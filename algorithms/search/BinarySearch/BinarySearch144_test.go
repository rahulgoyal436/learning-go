// ********RoostGPT********
/*
Test generated by RoostGPT for test roost_test using AI Type  and AI Model 

ROOST_METHOD_HASH=binarySearch_5149337a0e
ROOST_METHOD_SIG_HASH=binarySearch_7d22ad2576

Existing Test Information:
These test cases are already implemented and not included for test generation scenario:
File: learning-go/algorithms/search/BinarySearch/binarysearch_test.go
Test Cases:
    [TestBinarySearch]

Scenario 1: Binary Search with Query in the Middle of the Array

Details:
  Description: This test is meant to check whether the binary search function correctly identifies the position of a query that is located in the middle of the array.
Execution:
  Arrange: Create an array of sorted integers. Select a query that is present in the middle of the array.
  Act: Invoke the binarySearch function with the array and the query.
  Assert: Use Go's testing.T to assert that the returned index matches the known position of the query in the array.
Validation:
  The assertion verifies that the binary search algorithm correctly locates the query in the middle of the array. This is an important test as it validates the basic functionality of the binary search algorithm.

Scenario 2: Binary Search with Query at the Start of the Array

Details:
  Description: This test is meant to check whether the binary search function correctly identifies the position of a query that is located at the start of the array.
Execution:
  Arrange: Create an array of sorted integers. Select a query that is the first element in the array.
  Act: Invoke the binarySearch function with the array and the query.
  Assert: Use Go's testing.T to assert that the returned index matches the known position of the query in the array.
Validation:
  The assertion verifies that the binary search algorithm correctly locates the query at the start of the array. This is an important test as it checks the algorithm's ability to handle edge cases.

Scenario 3: Binary Search with Query at the End of the Array

Details:
  Description: This test is meant to check whether the binary search function correctly identifies the position of a query that is located at the end of the array.
Execution:
  Arrange: Create an array of sorted integers. Select a query that is the last element in the array.
  Act: Invoke the binarySearch function with the array and the query.
  Assert: Use Go's testing.T to assert that the returned index matches the known position of the query in the array.
Validation:
  The assertion verifies that the binary search algorithm correctly locates the query at the end of the array. This is an important test as it checks the algorithm's ability to handle edge cases.

Scenario 4: Binary Search with Query Not Present in the Array

Details:
  Description: This test is meant to check whether the binary search function correctly returns -1 when the query is not present in the array.
Execution:
  Arrange: Create an array of sorted integers. Select a query that is not present in the array.
  Act: Invoke the binarySearch function with the array and the query.
  Assert: Use Go's testing.T to assert that the returned index is -1.
Validation:
  The assertion verifies that the binary search algorithm correctly returns -1 when the query is not present in the array. This is an important test as it checks the algorithm's ability to handle cases where the query is not found.
*/

// ********RoostGPT********
'''
package BinarySearch

import (
	"testing"
)

func TestBinarySearch144(t *testing.T) {
	// Define multiple test cases
	testCases := []struct {
		name   string
		arr    []int
		query  int
		expect int
	}{
		{
			name:   "Scenario 1: Binary Search with Query in the Middle of the Array",
			arr:    []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10},
			query:  5,
			expect: 4,
		},
		{
			name:   "Scenario 2: Binary Search with Query at the Start of the Array",
			arr:    []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10},
			query:  1,
			expect: 0,
		},
		{
			name:   "Scenario 3: Binary Search with Query at the End of the Array",
			arr:    []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10},
			query:  10,
			expect: 9,
		},
		{
			name:   "Scenario 4: Binary Search with Query Not Present in the Array",
			arr:    []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10},
			query:  11,
			expect: -1,
		},
	}

	for _, tc := range testCases {
		t.Run(tc.name, func(t *testing.T) {
			result := binarySearch(tc.arr, tc.query)
			if result != tc.expect {
				t.Fatalf("expected %v, but got %v", tc.expect, result)
			}
		})
	}
}
'''