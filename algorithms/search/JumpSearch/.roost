package JumpSearch

import (
	"testing"
)

// TestjumpSearch is a series of unit tests for jumpSearch function.
// Expected the function jumpSearch is already imported from JumpSearch package.

// Test scenarios cover various cases including normal operations and edge cases.
func TestjumpSearch(t *testing.T) {
	// Define a struct to hold test case information
	type testCase struct {
		name     string
		arr      []int
		query    int
		expected int
	}

	// Create a slice of test cases to test different scenarios
	tests := []testCase{
		{
			name:     "Scenario 1: Search for an Existing Element",
			arr:      []int{1, 3, 5, 7, 9, 11, 13, 15, 17, 19},
			query:    7,
			expected: 3,
		},
		{
			name:     "Scenario 2: Search for a Non-Existent Element",
			arr:      []int{1, 3, 5, 7, 9, 11, 13, 15, 17, 19},
			query:    4,
			expected: -1,
		},
		{
			name:     "Scenario 3: Search in an Empty Array",
			arr:      []int{},
			query:    1,
			expected: -1,
		},
		{
			name:     "Scenario 4: Search for the First Element",
			arr:      []int{1, 3, 5, 7, 9, 11, 13, 15, 17, 19},
			query:    1,
			expected: 0,
		},
		{
			name:     "Scenario 5: Search for the Last Element",
			arr:      []int{1, 3, 5, 7, 9, 11, 13, 15, 17, 19},
			query:    19,
			expected: 9,
		},
		{
			name:     "Scenario 6: Search with Step Exactly Matching Array Length",
			arr:      []int{10},
			query:    11,
			expected: -1,
		},
	}

	// Execute each test case
	for _, tc := range tests {
		// Run the test in case of parallel execution in larger test suites
		tc := tc // capture range variable
		t.Run(tc.name, func(t *testing.T) {
			// Call the jumpSearch function
			result := jumpSearch(tc.arr, tc.query)

			// Validate the result using assertions
			if result != tc.expected {
				t.Errorf("Test %s failed: expected %d but got %d", tc.name, tc.expected, result)
			} else {
				t.Logf("Test %s passed: expected %d and got %d", tc.name, tc.expected, result)
			}
		})
	}

	// TODO: Additional edge cases and concurrency checks can be added as future scenarios.
	//       Confirm appropriate handling for arrays with duplicate values, negative integers, etc.
}
