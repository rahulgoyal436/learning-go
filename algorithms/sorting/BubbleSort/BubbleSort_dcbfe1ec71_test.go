// Test generated by RoostGPT for test roost-test using AI Type Open AI and AI Model gpt-4

package BubbleSort

import (
	"reflect"
	"testing"
)

func TestBubbleSort_dcbfe1ec71(t *testing.T) {
	// Test case 1: Normal scenario with unsorted array
	arr1 := []int{64, 34, 25, 12, 22, 11, 90}
	sortedArr1 := []int{11, 12, 22, 25, 34, 64, 90}
	resultArr1 := bubbleSort(arr1)
	if !reflect.DeepEqual(resultArr1, sortedArr1) {
		t.Errorf("Test failed! Args: %v, Wanted: %v, Got: %v", arr1, sortedArr1, resultArr1)
	} else {
		t.Logf("Test passed! Args: %v, Wanted: %v, Got: %v", arr1, sortedArr1, resultArr1)
	}

	// Test case 2: Edge case with already sorted array
	arr2 := []int{1, 2, 3, 4, 5}
	sortedArr2 := []int{1, 2, 3, 4, 5}
	resultArr2 := bubbleSort(arr2)
	if !reflect.DeepEqual(resultArr2, sortedArr2) {
		t.Errorf("Test failed! Args: %v, Wanted: %v, Got: %v", arr2, sortedArr2, resultArr2)
	} else {
		t.Logf("Test passed! Args: %v, Wanted: %v, Got: %v", arr2, sortedArr2, resultArr2)
	}

	// Test case 3: Edge case with array having same elements
	arr3 := []int{9, 9, 9, 9, 9}
	sortedArr3 := []int{9, 9, 9, 9, 9}
	resultArr3 := bubbleSort(arr3)
	if !reflect.DeepEqual(resultArr3, sortedArr3) {
		t.Errorf("Test failed! Args: %v, Wanted: %v, Got: %v", arr3, sortedArr3, resultArr3)
	} else {
		t.Logf("Test passed! Args: %v, Wanted: %v, Got: %v", arr3, sortedArr3, resultArr3)
	}
}
