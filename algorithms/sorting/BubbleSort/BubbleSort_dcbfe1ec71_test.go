// Test generated by RoostGPT for test roost-test using AI Type Open AI and AI Model gpt-4

package BubbleSort

import (
	"reflect"
	"testing"
)

func TestBubbleSort_dcbfe1ec71(t *testing.T) {
	// Test with unsorted array
	arr := []int{5, 3, 8, 4, 1}
	expected := []int{1, 3, 4, 5, 8}
	result := bubbleSort(arr)
	if !reflect.DeepEqual(result, expected) {
		t.Errorf("Test failed, expected: '%v', got:  '%v'", expected, result)
	} else {
		t.Logf("Test passed, expected: '%v', got:  '%v'", expected, result)
	}

	// Test with already sorted array
	arr = []int{1, 2, 3, 4, 5}
	expected = []int{1, 2, 3, 4, 5}
	result = bubbleSort(arr)
	if !reflect.DeepEqual(result, expected) {
		t.Errorf("Test failed, expected: '%v', got:  '%v'", expected, result)
	} else {
		t.Logf("Test passed, expected: '%v', got:  '%v'", expected, result)
	}

	// Test with array containing duplicate values
	arr = []int{5, 3, 8, 5, 1}
	expected = []int{1, 3, 5, 5, 8}
	result = bubbleSort(arr)
	if !reflect.DeepEqual(result, expected) {
		t.Errorf("Test failed, expected: '%v', got:  '%v'", expected, result)
	} else {
		t.Logf("Test passed, expected: '%v', got:  '%v'", expected, result)
	}

	// Test with empty array
	arr = []int{}
	expected = []int{}
	result = bubbleSort(arr)
	if !reflect.DeepEqual(result, expected) {
		t.Errorf("Test failed, expected: '%v', got:  '%v'", expected, result)
	} else {
		t.Logf("Test passed, expected: '%v', got:  '%v'", expected, result)
	}
}
