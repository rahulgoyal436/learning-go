// Test generated by RoostGPT for test roost-test using AI Type Open AI and AI Model gpt-4

package BubbleSort

import (
	"reflect"
	"testing"
)

func TestBubbleSort_dcbfe1ec71(t *testing.T) {
	// Test case 1: Normal scenario
	arr1 := []int{5, 3, 2, 8, 6, 7}
	expected1 := []int{2, 3, 5, 6, 7, 8}
	result1 := bubbleSort(arr1)
	if !reflect.DeepEqual(result1, expected1) {
		t.Errorf("Test case 1 failed, expected: %v, got: %v", expected1, result1)
	} else {
		t.Logf("Test case 1 succeeded")
	}

	// Test case 2: Array with duplicate elements
	arr2 := []int{5, 3, 2, 8, 6, 7, 2, 3}
	expected2 := []int{2, 2, 3, 3, 5, 6, 7, 8}
	result2 := bubbleSort(arr2)
	if !reflect.DeepEqual(result2, expected2) {
		t.Errorf("Test case 2 failed, expected: %v, got: %v", expected2, result2)
	} else {
		t.Logf("Test case 2 succeeded")
	}

	// Test case 3: Empty array
	arr3 := []int{}
	expected3 := []int{}
	result3 := bubbleSort(arr3)
	if !reflect.DeepEqual(result3, expected3) {
		t.Errorf("Test case 3 failed, expected: %v, got: %v", expected3, result3)
	} else {
		t.Logf("Test case 3 succeeded")
	}

	// Test case 4: Array with single element
	arr4 := []int{5}
	expected4 := []int{5}
	result4 := bubbleSort(arr4)
	if !reflect.DeepEqual(result4, expected4) {
		t.Errorf("Test case 4 failed, expected: %v, got: %v", expected4, result4)
	} else {
		t.Logf("Test case 4 succeeded")
	}
}
