// Test generated by RoostGPT for test roost-test using AI Type Open AI and AI Model gpt-4

package BubbleSort

import (
	"reflect"
	"testing"
)

// bubbleSort is a function that sorts an array using the bubble sort algorithm
func bubbleSort(arr []int) []int {
	for i := 0; i < len(arr); i++ {
		for j := 0; j < len(arr)-1; j++ {
			if arr[j] > arr[j+1] {
				swap(arr, j, j+1)
			}
		}
	}

	return arr
}

// swap is a helper function that swaps the position of two elements in an array
func swap(arr []int, i, j int) {
	temp := arr[i]
	arr[i] = arr[j]
	arr[j] = temp
}

// TestBubbleSort_dcbfe1ec71 is a test function for the bubbleSort function
func TestBubbleSort_dcbfe1ec71(t *testing.T) {
	// Test case 1: Normal scenario with unsorted array
	arr1 := []int{5, 1, 4, 2, 8}
	expected1 := []int{1, 2, 4, 5, 8}
	result1 := bubbleSort(arr1)

	if !reflect.DeepEqual(result1, expected1) {
		t.Error("Test case 1 failed: ", arr1, " expected output: ", expected1, " but got: ", result1)
	} else {
		t.Log("Test case 1 passed")
	}

	// Test case 2: Array with negative numbers
	arr2 := []int{-3, -1, -2}
	expected2 := []int{-3, -2, -1}
	result2 := bubbleSort(arr2)

	if !reflect.DeepEqual(result2, expected2) {
		t.Error("Test case 2 failed: ", arr2, " expected output: ", expected2, " but got: ", result2)
	} else {
		t.Log("Test case 2 passed")
	}

	// Test case 3: Array with duplicate numbers
	arr3 := []int{1, 2, 1, 2, 1}
	expected3 := []int{1, 1, 1, 2, 2}
	result3 := bubbleSort(arr3)

	if !reflect.DeepEqual(result3, expected3) {
		t.Error("Test case 3 failed: ", arr3, " expected output: ", expected3, " but got: ", result3)
	} else {
		t.Log("Test case 3 passed")
	}

	// Test case 4: Empty array
	arr4 := []int{}
	expected4 := []int{}
	result4 := bubbleSort(arr4)

	if !reflect.DeepEqual(result4, expected4) {
		t.Error("Test case 4 failed: ", arr4, " expected output: ", expected4, " but got: ", result4)
	} else {
		t.Log("Test case 4 passed")
	}
}
